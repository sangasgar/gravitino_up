"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.typedTokenHelpers = void 0;
const utils_1 = require("@typescript-eslint/utils");
const parser_1 = require("@typescript-eslint/parser");
const typescript_1 = __importDefault(require("typescript"));
const tsutils = __importStar(require("ts-api-utils"));
exports.typedTokenHelpers = {
    decoratorsThatCouldMeanTheDevIsValidatingAnArray: [
        "IsArray",
        "ArrayMinSize",
        "ArrayMinSize",
        "ArrayContains",
        "ArrayNotContains",
        "ArrayNotEmpty",
        "ArrayUnique",
    ],
    isTypeArrayTypeOrUnionOfArrayTypes(node, parserService, checker) {
        if (node?.typeAnnotation
            ?.typeAnnotation?.type === utils_1.TSESTree.AST_NODE_TYPES.TSArrayType) {
            return true;
        }
        const nodeType = this.getNodeType(node, parserService, checker);
        if (checker.isArrayType(nodeType)) {
            return true;
        }
        for (const t of tsutils.unionTypeParts(nodeType)) {
            if (!checker.isArrayType(t)) {
                return false;
            }
        }
        return true;
    },
    getNodeType(node, parserService, checker) {
        const tsNode = parserService.esTreeNodeToTSNodeMap.get(node);
        return exports.typedTokenHelpers.getConstrainedTypeAtLocation(checker, tsNode);
    },
    expressionNodeIsArrayType(node, parserService, checker) {
        const nodeType = this.getNodeType(node, parserService, checker);
        return checker.isArrayType(nodeType);
    },
    getPropertyValueEqualsExpected(firstArgument, propertyName, expectedValue) {
        let didMatchExpectedValues = false;
        if (firstArgument !== undefined) {
            const foundPropertyOfName = firstArgument.properties.find((p) => p.type === utils_1.TSESTree.AST_NODE_TYPES.Property &&
                p.key.name === propertyName);
            didMatchExpectedValues =
                foundPropertyOfName !== undefined &&
                    foundPropertyOfName.type === utils_1.TSESTree.AST_NODE_TYPES.Property &&
                    foundPropertyOfName.value?.value ===
                        expectedValue;
        }
        return didMatchExpectedValues;
    },
    getConstrainedTypeAtLocation(checker, node) {
        const nodeType = checker.getTypeAtLocation(node);
        const constrained = checker.getBaseConstraintOfType(nodeType);
        return constrained ?? nodeType;
    },
    nodeHasDecoratorsNamed(n, decoratorNames) {
        const decorators = this.getDecoratorsNamed(n, decoratorNames);
        return decorators.length > 0;
    },
    getDecoratorsNamed(n, decoratorNames) {
        const decorators = n.decorators?.filter((d) => {
            const factoryMethodDecoratorIdentifier = d.expression
                .callee?.name;
            const decoratorIdentifier = d.expression
                ?.name;
            return decoratorNames.includes(factoryMethodDecoratorIdentifier ?? decoratorIdentifier ?? "");
        });
        return decorators || [];
    },
    parseStringToAst(code, path, context) {
        return (0, parser_1.parse)(code, {
            filePath: path,
            range: true,
            tokens: true,
            loc: true,
            ...context.parserOptions,
        });
    },
    isEnumType(type) {
        // if for some reason this returns true...
        if (tsutils.isTypeFlagSet(type, typescript_1.default.TypeFlags.Enum))
            return true;
        if (tsutils.isTypeFlagSet(type, typescript_1.default.TypeFlags.EnumLike))
            return true;
        // it's not an enum type if it's an enum literal type
        if (tsutils.isTypeFlagSet(type, typescript_1.default.TypeFlags.EnumLiteral) &&
            !type.isUnion())
            return false;
        // get the symbol and check if its value declaration is an enum declaration
        const symbol = type.getSymbol();
        if (symbol == null)
            return false;
        const { valueDeclaration } = symbol;
        return (valueDeclaration != null &&
            valueDeclaration.kind === typescript_1.default.SyntaxKind.EnumDeclaration);
    },
    isOptionalPropertyValue(node) {
        const isUndefinedType = node.typeAnnotation?.typeAnnotation?.types?.find((t) => t.type === utils_1.AST_NODE_TYPES.TSUndefinedKeyword) !== undefined;
        const isOptionalPropertyValue = node.optional || isUndefinedType || false;
        return isOptionalPropertyValue;
    },
    /**
     * Checks if an import is an import of the given decorator name
     * @param imp
     * @param decoratorName
     */
    importIsDecorator(imp, decoratorName) {
        const isFromClassValidator = imp.source.value.startsWith("class-validator");
        const isDecoratorImport = imp.specifiers.some((specifier) => specifier.local.name === decoratorName);
        return isFromClassValidator && isDecoratorImport;
    },
    /**
     * Checks if decorator is in imports of a node
     * @param imports
     * @param decorator
     */
    decoratorIsImportedFromClassValidator(imports, decorator) {
        const decoratorName = this.getDecoratorName(decorator);
        if (!decoratorName) {
            return false;
        }
        return imports.some((imp) => exports.typedTokenHelpers.importIsDecorator(imp, decoratorName));
    },
    /**
     * Checks whether a decorator is a class validator decorator
     * @param program The root program node
     * @param decorator The decorator node
     */
    decoratorIsClassValidatorDecorator(program, decorator) {
        if (!program) {
            return false;
        }
        const imports = program.body.filter((node) => node.type === utils_1.TSESTree.AST_NODE_TYPES.ImportDeclaration);
        return exports.typedTokenHelpers.decoratorIsImportedFromClassValidator(imports, decorator);
    },
    /**
     * Gets the root program of a node
     * @param node
     */
    getRootProgram(node) {
        let root = node;
        while (root.parent) {
            if (root.parent.type === utils_1.TSESTree.AST_NODE_TYPES.Program) {
                return root.parent;
            }
            root = root.parent;
        }
        return null;
    },
    /**
     * Gets all the decorators actually imported from class-validator lib or decorators that were included in the additionalCustomValidatorDecorators options
     * @param node PropertyDefinition node
     */
    getValidationDecorators(node, additionalCustomValidatorDecorators = []) {
        const program = exports.typedTokenHelpers.getRootProgram(node);
        const { decorators } = node;
        return (decorators?.filter((decorator) => {
            const isClassValidatorDecorator = exports.typedTokenHelpers.decoratorIsClassValidatorDecorator(program, decorator);
            const decoratorName = exports.typedTokenHelpers.getDecoratorName(decorator);
            const isCustomClassValidatorDecorator = decoratorName === null
                ? false
                : additionalCustomValidatorDecorators.includes(decoratorName);
            return (isCustomClassValidatorDecorator || isClassValidatorDecorator);
        }) ?? []);
    },
    /**
     * Checks if the decorator is the IsEnum decorator
     * @param decorator
     */
    decoratorIsIsEnum(decorator) {
        const decoratorName = this.getDecoratorName(decorator);
        return decoratorName === "IsEnum";
    },
    /** Checks if the decorator is the IsObject decorator
     * @param decorator
     */
    decoratorIsIsObject(decorator) {
        const decoratorName = this.getDecoratorName(decorator);
        return decoratorName === "IsObject";
    },
    /**
     * Gets the name of a decorator
     * Returns null if no name is found
     * @param decorator
     */
    getDecoratorName(decorator) {
        if (decorator.expression.type !== utils_1.TSESTree.AST_NODE_TYPES.CallExpression) {
            return null;
        }
        if (decorator.expression.callee.type !==
            utils_1.TSESTree.AST_NODE_TYPES.Identifier) {
            return null;
        }
        return decorator.expression.callee.name;
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZWRUb2tlbkhlbHBlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvdHlwZWRUb2tlbkhlbHBlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxvREFBNEU7QUFDNUUsc0RBQWdFO0FBQ2hFLDREQUE0QjtBQUM1QixzREFBd0M7QUFFM0IsUUFBQSxpQkFBaUIsR0FBRztJQUM3QixnREFBZ0QsRUFBRTtRQUM5QyxTQUFTO1FBQ1QsY0FBYztRQUNkLGNBQWM7UUFDZCxlQUFlO1FBQ2Ysa0JBQWtCO1FBQ2xCLGVBQWU7UUFDZixhQUFhO0tBQ2hCO0lBQ0Qsa0NBQWtDLENBQzlCLElBQW1CLEVBQ25CLGFBQTZCLEVBQzdCLE9BQXVCO1FBRXZCLElBQ0ssSUFBb0MsRUFBRSxjQUFjO1lBQ2pELEVBQUUsY0FBYyxFQUFFLElBQUksS0FBSyxnQkFBUSxDQUFDLGNBQWMsQ0FBQyxXQUFXLEVBQ3BFO1lBQ0UsT0FBTyxJQUFJLENBQUM7U0FDZjtRQUVELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNoRSxJQUFJLE9BQU8sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDL0IsT0FBTyxJQUFJLENBQUM7U0FDZjtRQUNELEtBQUssTUFBTSxDQUFDLElBQUksT0FBTyxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUM5QyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDekIsT0FBTyxLQUFLLENBQUM7YUFDaEI7U0FDSjtRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFDRCxXQUFXLENBQ1AsSUFBbUIsRUFDbkIsYUFBNkIsRUFDN0IsT0FBdUI7UUFFdkIsTUFBTSxNQUFNLEdBQUcsYUFBYSxDQUFDLHFCQUFx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