"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.nestProviderAstParser = void 0;
const utils_1 = require("@typescript-eslint/utils");
const NestProvidedInjectablesMap_1 = require("./models/NestProvidedInjectablesMap");
exports.nestProviderAstParser = {
    mapNestProviderObject(n, path) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const propertyName = n.value.name;
        if (propertyName) {
            return [
                path,
                new NestProvidedInjectablesMap_1.NestProvidedInjectablesMap(new Set(), new Set([propertyName])),
            ];
        }
        return null;
    },
    findProvideProperty(providerDeclaration, propertyName) {
        if (providerDeclaration) {
            const foundProviderProperty = providerDeclaration.init.properties.find((p) => 
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            p.key
                .name === propertyName);
            return foundProviderProperty;
        }
        return null;
    },
    findNestProviderVariableDeclaration(ast) {
        for (const n of ast.body) {
            if ((n.type === utils_1.AST_NODE_TYPES.ExportNamedDeclaration ||
                n.type === utils_1.AST_NODE_TYPES.ExportDefaultDeclaration) &&
                n.declaration?.type === utils_1.AST_NODE_TYPES.VariableDeclaration) {
                const providerDeclaration = n.declaration.declarations.find((d) => {
                    const isObjectExpression = (d.type === utils_1.AST_NODE_TYPES.VariableDeclarator &&
                        // has property "provide" and that property is an identifier
                        d.init?.type ===
                            utils_1.AST_NODE_TYPES.ObjectExpression) ||
                        false;
                    const hasProvideProperty = isObjectExpression &&
                        d.init.properties.some((property) => {
                            return ((property.type ===
                                utils_1.AST_NODE_TYPES.Property &&
                                property.key.type ===
                                    utils_1.AST_NODE_TYPES.Identifier &&
                                property.key.name === "provide" &&
                                property.value.type ===
                                    utils_1.AST_NODE_TYPES.Identifier) ||
                                false);
                        });
                    return hasProvideProperty;
                });
                return providerDeclaration;
            }
        }
        return undefined;
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmVzdFByb3ZpZGVyQXN0UGFyc2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3V0aWxzL25lc3RNb2R1bGVzL25lc3RQcm92aWRlckFzdFBhcnNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxvREFBa0U7QUFDbEUsb0ZBQStFO0FBRWxFLFFBQUEscUJBQXFCLEdBQUc7SUFDakMscUJBQXFCLENBQ2pCLENBQW9CLEVBQ3BCLElBQVk7UUFFWiw4REFBOEQ7UUFDOUQsTUFBTSxZQUFZLEdBQUksQ0FBQyxDQUFDLEtBQTZCLENBQUMsSUFBSSxDQUFDO1FBQzNELElBQUksWUFBWSxFQUFFO1lBQ2QsT0FBTztnQkFDSCxJQUFJO2dCQUNKLElBQUksdURBQTBCLENBQzFCLElBQUksR0FBRyxFQUFFLEVBQ1QsSUFBSSxHQUFHLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUMxQjthQUNKLENBQUM7U0FDTDtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFDRCxtQkFBbUIsQ0FDZixtQkFBNEQsRUFDNUQsWUFBb0I7UUFFcEIsSUFBSSxtQkFBbUIsRUFBRTtZQUNyQixNQUFNLHFCQUFxQixHQUN2QixtQkFBbUIsQ0FBQyxJQUN2QixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQ2IsQ0FBQyxDQUFDLEVBQUUsRUFBRTtZQUNGLDhEQUE4RDtZQUM1RCxDQUF1QixDQUFDLEdBQTJCO2lCQUNoRCxJQUFJLEtBQUssWUFBWSxDQUNaLENBQUM7WUFDdkIsT0FBTyxxQkFBcUIsQ0FBQztTQUNoQztRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFDRCxtQ0FBbUMsQ0FDL0IsR0FBcUI7UUFFckIsS0FBSyxNQUFNLENBQUMsSUFBSSxHQUFHLENBQUMsSUFBSSxFQUFFO1lBQ3RCLElBQ0ksQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLHNCQUFjLENBQUMsc0JBQXNCO2dCQUM3QyxDQUFDLENBQUMsSUFBSSxLQUFLLHNCQUFjLENBQUMsd0JBQXdCLENBQUM7Z0JBQ3ZELENBQUMsQ0FBQyxXQUFXLEVBQUUsSUFBSSxLQUFLLHNCQUFjLENBQUMsbUJBQW1CLEVBQzVEO2dCQUNFLE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUN2RCxDQUFDLENBQUMsRUFBRSxFQUFFO29CQUNGLE1BQU0sa0JBQWtCLEdBQ3BCLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxzQkFBYyxDQUFDLGtCQUFrQjt3QkFDekMsNERBQTREO3dCQUM1RCxDQUFDLENBQUMsSUFBSSxFQUFFLElBQUk7NEJBQ1Isc0JBQWMsQ0FBQyxnQkFBZ0IsQ0FBQzt3QkFDeEMsS0FBSyxDQUFDO29CQUVWLE1BQU0sa0JBQWtCLEdBQ3BCLGtCQUFrQjt3QkFFZCxDQUFDLENBQUMsSUFDTCxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRTs0QkFDM0IsT0FBTyxDQUNILENBQUMsUUFBUSxDQUFDLElBQUk7Z0NBQ1Ysc0JBQWMsQ0FBQyxRQUFRO2dDQUN2QixRQUFRLENBQUMsR0FBRyxDQUFDLElBQUk7b0NBQ2Isc0JBQWMsQ0FBQyxVQUFVO2dDQUM3QixRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksS0FBSyxTQUFTO2dDQUMvQixRQUFRLENBQUMsS0FBSyxDQUFDLElBQUk7b0NBQ2Ysc0JBQWMsQ0FBQyxVQUFVLENBQUM7Z0NBQ2xDLEtBQUssQ0FDUixDQUFDO3dCQUNOLENBQUMsQ0FBQyxDQUFDO29CQUNQLE9BQU8sa0JBQWtCLENBQUM7Z0JBQzlCLENBQUMsQ0FDSixDQUFDO2dCQUVGLE9BQU8sbUJBQW1CLENBQUM7YUFDOUI7U0FDSjtRQUNELE9BQU8sU0FBUyxDQUFDO0lBQ3JCLENBQUM7Q0FDSixDQUFDIn0=