"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.nestModuleAstParser = void 0;
const utils_1 = require("@typescript-eslint/utils");
const NestProvidedInjectablesMap_1 = require("./models/NestProvidedInjectablesMap");
exports.nestModuleAstParser = {
    findNestModuleClass(ast) {
        for (const n of ast.body) {
            // find class declaration even if it's inside an export
            if (n.type === utils_1.AST_NODE_TYPES.ClassDeclaration &&
                n.decorators &&
                n.decorators.length > 0) {
                return n;
            }
            if ((n.type === utils_1.AST_NODE_TYPES.ExportNamedDeclaration ||
                n.type === utils_1.AST_NODE_TYPES.ExportDefaultDeclaration) &&
                n.declaration?.type === utils_1.AST_NODE_TYPES.ClassDeclaration) {
                return n.declaration;
            }
        }
        return null;
    },
    mapNestModuleDecorator(n, path) {
        // The nest module decorator is called "Module"
        const moduleDecorator = n.decorators?.find((d) => d.expression
            .callee?.name === "Module");
        if (moduleDecorator) {
            const mappedControllerElements = this.mapModuleDecoratorOptionProperty(moduleDecorator, "controllers");
            const mappedProviderElements = this.mapModuleDecoratorOptionProperty(moduleDecorator, "providers");
            const nestModuleMap = [
                path,
                new NestProvidedInjectablesMap_1.NestProvidedInjectablesMap(
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                mappedControllerElements, mappedProviderElements),
            ];
            return nestModuleMap;
        }
        return null;
    },
    mapModuleDecoratorOptionProperty(moduleDecorator, propertyName) {
        const optionProperty = moduleDecorator.expression
            .arguments[0].properties.find((p) => p.key.name ===
            propertyName);
        if (optionProperty) {
            // a property can be an array expression e.g. myProp = []
            // or a variable e.g. myProp = someArray
            // - this only supports array expressions for now!
            const propertyAsArrayExpressionElements = optionProperty
                .value?.elements || [];
            return new Set(propertyAsArrayExpressionElements.map((element) => element.name));
        }
        return new Set();
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmVzdE1vZHVsZUFzdFBhcnNlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9uZXN0TW9kdWxlcy9uZXN0TW9kdWxlQXN0UGFyc2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG9EQUFrRTtBQUNsRSxvRkFBK0U7QUFFbEUsUUFBQSxtQkFBbUIsR0FBRztJQUMvQixtQkFBbUIsQ0FDZixHQUFxQjtRQUVyQixLQUFLLE1BQU0sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxJQUFJLEVBQUU7WUFDdEIsdURBQXVEO1lBQ3ZELElBQ0ksQ0FBQyxDQUFDLElBQUksS0FBSyxzQkFBYyxDQUFDLGdCQUFnQjtnQkFDMUMsQ0FBQyxDQUFDLFVBQVU7Z0JBQ1osQ0FBQyxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUN6QjtnQkFDRSxPQUFPLENBQUMsQ0FBQzthQUNaO1lBRUQsSUFDSSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssc0JBQWMsQ0FBQyxzQkFBc0I7Z0JBQzdDLENBQUMsQ0FBQyxJQUFJLEtBQUssc0JBQWMsQ0FBQyx3QkFBd0IsQ0FBQztnQkFDdkQsQ0FBQyxDQUFDLFdBQVcsRUFBRSxJQUFJLEtBQUssc0JBQWMsQ0FBQyxnQkFBZ0IsRUFDekQ7Z0JBQ0UsT0FBTyxDQUFDLENBQUMsV0FBVyxDQUFDO2FBQ3hCO1NBQ0o7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQsc0JBQXNCLENBQ2xCLENBQTRCLEVBQzVCLElBQVk7UUFFWiwrQ0FBK0M7UUFDL0MsTUFBTSxlQUFlLEdBQUcsQ0FBQyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQ3RDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FFRyxDQUFDLENBQUMsVUFBc0M7YUFDcEMsTUFDUixFQUFFLElBQUksS0FBSyxRQUFRLENBQzNCLENBQUM7UUFDRixJQUFJLGVBQWUsRUFBRTtZQUNqQixNQUFNLHdCQUF3QixHQUMxQixJQUFJLENBQUMsZ0NBQWdDLENBQ2pDLGVBQWUsRUFDZixhQUFhLENBQ2hCLENBQUM7WUFDTixNQUFNLHNCQUFzQixHQUN4QixJQUFJLENBQUMsZ0NBQWdDLENBQ2pDLGVBQWUsRUFDZixXQUFXLENBQ2QsQ0FBQztZQUVOLE1BQU0sYUFBYSxHQUFHO2dCQUNsQixJQUFJO2dCQUNKLElBQUksdURBQTBCO2dCQUMxQiw4REFBOEQ7Z0JBQzlELHdCQUF3QixFQUN4QixzQkFBc0IsQ0FDekI7YUFDSixDQUFDO1lBQ0YsT0FBTyxhQUFhLENBQUM7U0FDeEI7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBQ0QsZ0NBQWdDLENBQzVCLGVBQW1DLEVBQ25DLFlBQW9CO1FBRXBCLE1BQU0sY0FBYyxHQUNmLGVBQWUsQ0FBQyxVQUFpRDthQUM3RCxTQUFTLENBQUMsQ0FBQyxDQUNuQixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQ2IsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUNBLENBQXVCLENBQUMsR0FBMkIsQ0FBQyxJQUFJO1lBQzFELFlBQVksQ0FDbkIsQ0FBQztRQUVGLElBQUksY0FBYyxFQUFFO1lBQ2hCLHlEQUF5RDtZQUN6RCx3Q0FBd0M7WUFDeEMsa0RBQWtEO1lBRWxELE1BQU0saUNBQWlDLEdBRTlCLGNBQStDO2lCQUMzQyxLQUNSLEVBQUUsUUFBUSxJQUFJLEVBQUUsQ0FBQztZQUV0QixPQUFPLElBQUksR0FBRyxDQUNWLGlDQUFpQyxDQUFDLEdBQUcsQ0FDakMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFFLE9BQStCLENBQUMsSUFBSSxDQUNyRCxDQUNKLENBQUM7U0FDTDtRQUVELE9BQU8sSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUNyQixDQUFDO0NBQ0osQ0FBQyJ9