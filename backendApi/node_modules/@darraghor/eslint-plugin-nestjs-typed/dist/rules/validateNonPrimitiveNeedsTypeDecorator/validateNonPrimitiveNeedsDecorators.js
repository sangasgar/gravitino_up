"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.shouldTrigger = void 0;
/* eslint-disable unicorn/prevent-abbreviations */
const utils_1 = require("@typescript-eslint/utils");
const createRule_1 = require("../../utils/createRule");
const typedTokenHelpers_1 = require("../../utils/typedTokenHelpers");
const primitiveTypes = new Set([
    utils_1.AST_NODE_TYPES.TSStringKeyword,
    utils_1.AST_NODE_TYPES.TSBooleanKeyword,
    utils_1.AST_NODE_TYPES.TSNumberKeyword,
    utils_1.AST_NODE_TYPES.TSNullKeyword,
]);
const shouldTrigger = () => {
    return true;
};
exports.shouldTrigger = shouldTrigger;
const rule = (0, createRule_1.createRule)({
    name: "validated-non-primitive-property-needs-type-decorator",
    meta: {
        docs: {
            description: "A non-primitive property with validation should probably use a @Type decorator",
            requiresTypeChecking: false,
        },
        messages: {
            autofixWithTypeDecorator: "Add @Type(() => {{ typeIdentifier }}) decorator before class property.",
            shouldUseTypeDecorator: "A non-primitive property with validation should probably use a @Type decorator. If this is an enum use @IsEnum(). If this is a plain object use @IsObject().",
        },
        schema: [
            {
                type: "object",
                properties: {
                    additionalTypeDecorators: {
                        description: "A list of custom type decorators that this rule will use to validate",
                        type: "array",
                        minItems: 0,
                        items: {
                            type: "string",
                            minLength: 1,
                        },
                    },
                    additionalCustomValidatorDecorators: {
                        description: "A list of custom validator decorators that this rule will use to validate",
                        type: "array",
                        minItems: 0,
                        items: {
                            type: "string",
                            minLength: 1,
                        },
                    },
                },
            },
        ],
        hasSuggestions: true,
        type: "suggestion",
    },
    defaultOptions: [
        {
            additionalTypeDecorators: new Array(),
            additionalCustomValidatorDecorators: new Array(),
        },
    ],
    create(context) {
        const { additionalTypeDecorators, additionalCustomValidatorDecorators } = context.options[0] || {
            additionalTypeDecorators: [],
            additionalCustomValidatorDecorators: [],
        };
        const parserServices = utils_1.ESLintUtils.getParserServices(context);
        const typeChecker = parserServices.program.getTypeChecker();
        return {
            // eslint-disable-next-line @typescript-eslint/naming-convention
            PropertyDefinition(node) {
                // if it's an array get the element type
                let mainType;
                const isAnArray = typedTokenHelpers_1.typedTokenHelpers.isTypeArrayTypeOrUnionOfArrayTypes(node, parserServices, typeChecker);
                // this is getting very messy
                if (isAnArray) {
                    const mainTypeInShortArray = node.typeAnnotation
                        ?.typeAnnotation?.elementType?.type;
                    // eslint-disable-next-line unicorn/no-negated-condition
                    if (!mainTypeInShortArray) {
                        // try to get the type of Array<type> syntax
                        const foundParams = node.typeAnnotation
                            ?.typeAnnotation?.typeArguments?.params;
                        if (foundParams && foundParams.length === 1) {
                            mainType = foundParams[0].type;
                        }
                    }
                    else {
                        mainType = mainTypeInShortArray;
                    }
                }
                else {
                    mainType = node.typeAnnotation?.typeAnnotation?.type;
                }
                if (!mainType) {
                    return;
                }
                // property is a primitive type - no need to validate
                const isNodeTypePrimitive = primitiveTypes.has(mainType);
                if (isNodeTypePrimitive) {
                    return;
                }
                // property is a union with primitive type - no need to validate
                const isNodeAUnionWithAPrimitive = mainType === utils_1.AST_NODE_TYPES.TSUnionType &&
                    (node.typeAnnotation
                        ?.typeAnnotation).types?.some((x) => primitiveTypes.has(x.type));
                if (isNodeAUnionWithAPrimitive) {
                    return;
                }
                // if this is an enum we don't need a type decorator
                const mappedNode = parserServices.esTreeNodeToTSNodeMap.get(node);
                const objectType = typeChecker.getTypeAtLocation(mappedNode);
                if (typedTokenHelpers_1.typedTokenHelpers.isEnumType(objectType)) {
                    return;
                }
                // We have to make an assumption here. We assume that
                // if there is a validation decorator on the property, this is an input DTO.
                // And for input DTOs they should specify types.
                // property has a validation decorator but not IsEnum
                // (we don't care about un-validated properties and enums don't need Type())
                const foundClassValidatorDecorators = typedTokenHelpers_1.typedTokenHelpers.getValidationDecorators(node, additionalCustomValidatorDecorators);
                const hasEnum = foundClassValidatorDecorators.some((foundClassValidatorDecorator) => typedTokenHelpers_1.typedTokenHelpers.decoratorIsIsEnum(foundClassValidatorDecorator));
                if (hasEnum) {
                    return;
                }
                const hasObject = foundClassValidatorDecorators.some((foundClassValidatorDecorator) => typedTokenHelpers_1.typedTokenHelpers.decoratorIsIsObject(foundClassValidatorDecorator));
                if (hasObject) {
                    return;
                }
                // const foundClassValidatorDecorators =
                //     typedTokenHelpers.getDecoratorsNamed(
                //         node,
                //         classValidatorDecorators.filter((x) => x !== "IsEnum")
                //     );
                if (foundClassValidatorDecorators.length === 0) {
                    return;
                }
                // we add the supplied extra decorators from settings to the type decorators
                const typeDecorators = new Array().concat(additionalTypeDecorators, // these are user-specified extra type decorators, unique to user's project
                ["Type"] //this is the default type decorator
                );
                // ok so does the property have Type decorator or custom type decorator? it probably should
                const foundTypeDecorator = typedTokenHelpers_1.typedTokenHelpers.getDecoratorsNamed(node, typeDecorators);
                if (foundTypeDecorator.length === 0) {
                    const typeAnnotationNode = node.typeAnnotation?.typeAnnotation;
                    let typeIdentifier;
                    if (typeAnnotationNode) {
                        if (typeAnnotationNode.type ===
                            utils_1.AST_NODE_TYPES.TSTypeReference &&
                            typeAnnotationNode.typeName.type ===
                                utils_1.AST_NODE_TYPES.Identifier) {
                            typeIdentifier = typeAnnotationNode.typeName.name;
                            if (typeAnnotationNode.typeName.name === "Array") {
                                const foundParams = node.typeAnnotation
                                    ?.typeAnnotation?.typeArguments?.params;
                                if (foundParams && foundParams.length === 1) {
                                    const typeName = foundParams[0].typeName;
                                    if (typeName.type ===
                                        utils_1.AST_NODE_TYPES.Identifier) {
                                        typeIdentifier = typeName.name;
                                    }
                                }
                            }
                        }
                        else if (typeAnnotationNode.type ===
                            utils_1.AST_NODE_TYPES.TSArrayType) {
                            const elementTypeNode = typeAnnotationNode.elementType;
                            if (elementTypeNode.type ===
                                utils_1.AST_NODE_TYPES.TSTypeReference &&
                                elementTypeNode.typeName.type ===
                                    utils_1.AST_NODE_TYPES.Identifier) {
                                typeIdentifier = elementTypeNode.typeName.name;
                            }
                        }
                    }
                    if (typeIdentifier) {
                        context.report({
                            node: node,
                            messageId: "shouldUseTypeDecorator",
                            suggest: [
                                {
                                    data: { typeIdentifier },
                                    messageId: "autofixWithTypeDecorator",
                                    fix: (fixer) => {
                                        return fixer.insertTextBefore(node, `@Type(() => ${typeIdentifier})`);
                                    },
                                },
                            ],
                        });
                    }
                    else {
                        context.report({
                            node: node,
                            messageId: "shouldUseTypeDecorator",
                        });
                    }
                }
            },
        };
    },
});
exports.default = rule;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGVOb25QcmltaXRpdmVOZWVkc0RlY29yYXRvcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcnVsZXMvdmFsaWRhdGVOb25QcmltaXRpdmVOZWVkc1R5cGVEZWNvcmF0b3IvdmFsaWRhdGVOb25QcmltaXRpdmVOZWVkc0RlY29yYXRvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsa0RBQWtEO0FBQ2xELG9EQUErRTtBQUMvRSx1REFBa0Q7QUFDbEQscUVBQWdFO0FBR2hFLE1BQU0sY0FBYyxHQUFHLElBQUksR0FBRyxDQUFDO0lBQzNCLHNCQUFjLENBQUMsZUFBZTtJQUM5QixzQkFBYyxDQUFDLGdCQUFnQjtJQUMvQixzQkFBYyxDQUFDLGVBQWU7SUFDOUIsc0JBQWMsQ0FBQyxhQUFhO0NBQy9CLENBQUMsQ0FBQztBQU9JLE1BQU0sYUFBYSxHQUFHLEdBQVksRUFBRTtJQUN2QyxPQUFPLElBQUksQ0FBQztBQUNoQixDQUFDLENBQUM7QUFGVyxRQUFBLGFBQWEsaUJBRXhCO0FBRUYsTUFBTSxJQUFJLEdBQUcsSUFBQSx1QkFBVSxFQUdyQjtJQUNFLElBQUksRUFBRSx1REFBdUQ7SUFDN0QsSUFBSSxFQUFFO1FBQ0YsSUFBSSxFQUFFO1lBQ0YsV0FBVyxFQUNQLGdGQUFnRjtZQUNwRixvQkFBb0IsRUFBRSxLQUFLO1NBQzlCO1FBQ0QsUUFBUSxFQUFFO1lBQ04sd0JBQXdCLEVBQ3BCLHdFQUF3RTtZQUM1RSxzQkFBc0IsRUFDbEIsOEpBQThKO1NBQ3JLO1FBQ0QsTUFBTSxFQUFFO1lBQ0o7Z0JBQ0ksSUFBSSxFQUFFLFFBQStCO2dCQUNyQyxVQUFVLEVBQUU7b0JBQ1Isd0JBQXdCLEVBQUU7d0JBQ3RCLFdBQVcsRUFDUCxzRUFBc0U7d0JBQzFFLElBQUksRUFBRSxPQUE4Qjt3QkFDcEMsUUFBUSxFQUFFLENBQUM7d0JBQ1gsS0FBSyxFQUFFOzRCQUNILElBQUksRUFBRSxRQUErQjs0QkFDckMs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