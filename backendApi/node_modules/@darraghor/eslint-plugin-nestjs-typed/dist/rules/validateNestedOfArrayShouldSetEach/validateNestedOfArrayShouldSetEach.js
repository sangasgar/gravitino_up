"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.shouldSetArrayProperty = void 0;
const utils_1 = require("@typescript-eslint/utils");
const createRule_1 = require("../../utils/createRule");
const typedTokenHelpers_1 = require("../../utils/typedTokenHelpers");
const arraySetResultModel_1 = __importDefault(require("./arraySetResultModel"));
const shouldSetArrayProperty = (node) => {
    const decorators = typedTokenHelpers_1.typedTokenHelpers.getDecoratorsNamed(node, [
        "ValidateNested",
    ]);
    if (decorators.length === 0) {
        return new arraySetResultModel_1.default(false, false);
    }
    const firstArgumentToDecorator = decorators[0].expression?.arguments[0];
    const hasEachSetInOptions = typedTokenHelpers_1.typedTokenHelpers.getPropertyValueEqualsExpected(firstArgumentToDecorator, "each", true);
    // handle string[] or Array<string>
    const isArrayType = (node.typeAnnotation?.typeAnnotation)
        .typeName?.name === "Array";
    const isTypescriptArrayType = node.typeAnnotation?.typeAnnotation.type === utils_1.AST_NODE_TYPES.TSArrayType;
    const isAnArrayLikeType = isArrayType || isTypescriptArrayType;
    return new arraySetResultModel_1.default(isAnArrayLikeType && !hasEachSetInOptions, !isAnArrayLikeType && hasEachSetInOptions);
};
exports.shouldSetArrayProperty = shouldSetArrayProperty;
const rule = (0, createRule_1.createRule)({
    name: "validate-nested-of-array-should-set-each",
    meta: {
        docs: {
            description: "If you set ValidateNested() on an array, you should set {each: true} in the options",
            requiresTypeChecking: false,
        },
        messages: {
            shouldSetEachPropertyTrue: `ValidateNested should have {each: true} when used on an array`,
            shouldSetEachPropertyFalse: `ValidateNested should not have {each: true} when used on non-arrays. Note: If this is a custom array class please ignore this suggestion, you should validate each in that case.`,
        },
        schema: [],
        hasSuggestions: false,
        type: "suggestion",
    },
    defaultOptions: [],
    create(context) {
        return {
            // eslint-disable-next-line @typescript-eslint/naming-convention
            PropertyDefinition: (node) => {
                const shouldSetArrayResults = (0, exports.shouldSetArrayProperty)(node);
                if (shouldSetArrayResults.isArrayShouldBeSetFalse) {
                    context.report({
                        node: node,
                        messageId: "shouldSetEachPropertyFalse",
                    });
                }
                if (shouldSetArrayResults.isArrayShouldBeSetTrue) {
                    context.report({
                        node: node,
                        messageId: "shouldSetEachPropertyTrue",
                    });
                }
            },
        };
    },
});
exports.default = rule;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGVOZXN0ZWRPZkFycmF5U2hvdWxkU2V0RWFjaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ydWxlcy92YWxpZGF0ZU5lc3RlZE9mQXJyYXlTaG91bGRTZXRFYWNoL3ZhbGlkYXRlTmVzdGVkT2ZBcnJheVNob3VsZFNldEVhY2gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsb0RBQWtFO0FBQ2xFLHVEQUFrRDtBQUNsRCxxRUFBZ0U7QUFDaEUsZ0ZBQXdEO0FBRWpELE1BQU0sc0JBQXNCLEdBQUcsQ0FDbEMsSUFBaUMsRUFDZCxFQUFFO0lBQ3JCLE1BQU0sVUFBVSxHQUFHLHFDQUFpQixDQUFDLGtCQUFrQixDQUFDLElBQUksRUFBRTtRQUMxRCxnQkFBZ0I7S0FDbkIsQ0FBQyxDQUFDO0lBRUgsSUFBSSxVQUFVLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtRQUN6QixPQUFPLElBQUksNkJBQW1CLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQ2hEO0lBRUQsTUFBTSx3QkFBd0IsR0FDMUIsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQ2pCLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBOEIsQ0FBQztJQUU3QyxNQUFNLG1CQUFtQixHQUNyQixxQ0FBaUIsQ0FBQyw4QkFBOEIsQ0FDNUMsd0JBQXdCLEVBQ3hCLE1BQU0sRUFDTixJQUFJLENBQ1AsQ0FBQztJQUNOLG1DQUFtQztJQUNuQyxNQUFNLFdBQVcsR0FFVCxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsY0FBMkMsQ0FBQTtTQUM1RCxRQUNSLEVBQUUsSUFBSSxLQUFLLE9BQU8sQ0FBQztJQUN4QixNQUFNLHFCQUFxQixHQUN2QixJQUFJLENBQUMsY0FBYyxFQUFFLGNBQWMsQ0FBQyxJQUFJLEtBQUssc0JBQWMsQ0FBQyxXQUFXLENBQUM7SUFDNUUsTUFBTSxpQkFBaUIsR0FBRyxXQUFXLElBQUkscUJBQXFCLENBQUM7SUFFL0QsT0FBTyxJQUFJLDZCQUFtQixDQUMxQixpQkFBaUIsSUFBSSxDQUFDLG1CQUFtQixFQUN6QyxDQUFDLGlCQUFpQixJQUFJLG1CQUFtQixDQUM1QyxDQUFDO0FBQ04sQ0FBQyxDQUFDO0FBbkNXLFFBQUEsc0JBQXNCLDBCQW1DakM7QUFFRixNQUFNLElBQUksR0FBRyxJQUFBLHVCQUFVLEVBR3JCO0lBQ0UsSUFBSSxFQUFFLDBDQUEwQztJQUNoRCxJQUFJLEVBQUU7UUFDRixJQUFJLEVBQUU7WUFDRixXQUFXLEVBQ1AscUZBQXFGO1lBRXpGLG9CQUFvQixFQUFFLEtBQUs7U0FDOUI7UUFDRCxRQUFRLEVBQUU7WUFDTix5QkFBeUIsRUFBRSwrREFBK0Q7WUFDMUYsMEJBQTBCLEVBQUUsa0xBQWtMO1NBQ2pOO1FBQ0QsTUFBTSxFQUFFLEVBQUU7UUFDVixjQUFjLEVBQUUsS0FBSztRQUNyQixJQUFJLEVBQUUsWUFBWTtLQUNyQjtJQUNELGNBQWMsRUFBRSxFQUFFO0lBRWxCLE1BQU0sQ0FBQyxPQUFPO1FBQ1YsT0FBTztZQUNILGdFQUFnRTtZQUNoRSxrQkFBa0IsRUFBRSxDQUFDLElBQW1CLEVBQUUsRUFBRTtnQkFDeEMsTUFBTSxxQkFBcUIsR0FBRyxJQUFBLDhCQUFzQixFQUNoRCxJQUFtQyxDQUN0QyxDQUFDO2dCQUVGLElBQUkscUJBQXFCLENBQUMsdUJBQXVCLEVBQUU7b0JBQy9DLE9BQU8sQ0FBQyxNQUFNLENBQUM7d0JBQ1gsSUFBSSxFQUFFLElBQUk7d0JBQ1YsU0FBUyxFQUFFLDRCQUE0QjtxQkFDMUMsQ0FBQyxDQUFDO2lCQUNOO2dCQUNELElBQUkscUJBQXFCLENBQUMsc0JBQXNCLEVBQUU7b0JBQzlDLE9BQU8sQ0FBQyxNQUFNLENBQUM7d0JBQ1gsSUFBSSxFQUFFLElBQUk7d0JBQ1YsU0FBUyxFQUFFLDJCQUEyQjtxQkFDekMsQ0FBQyxDQUFDO2lCQUNOO1lBQ0wsQ0FBQztTQUNKLENBQUM7SUFDTixDQUFDO0NBQ0osQ0FBQyxDQUFDO0FBRUgsa0JBQWUsSUFBSSxDQUFDIn0=