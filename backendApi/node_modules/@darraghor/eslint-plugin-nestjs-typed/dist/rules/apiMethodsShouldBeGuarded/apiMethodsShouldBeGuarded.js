"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.apiMethodsShouldBeGuarded = void 0;
const utils_1 = require("@typescript-eslint/utils");
const createRule_1 = require("../../utils/createRule");
const typedTokenHelpers_1 = require("../../utils/typedTokenHelpers");
const apiMethodsShouldBeGuarded = (node) => {
    const hasApiMethodDecorator = typedTokenHelpers_1.typedTokenHelpers.nodeHasDecoratorsNamed(node, ["Get", "Post", "Put", "Delete", "Patch", "Options", "Head", "All"]);
    const hasUseGuardsDecorator = typedTokenHelpers_1.typedTokenHelpers.nodeHasDecoratorsNamed(node, ["UseGuards"]);
    function findClassDeclaration(node) {
        if (node.type === utils_1.TSESTree.AST_NODE_TYPES.ClassDeclaration) {
            return node;
        }
        if (node.parent) {
            return findClassDeclaration(node.parent);
        }
        return null;
    }
    const classNode = findClassDeclaration(node);
    const hasUseGuardsDecoratorOnController = classNode
        ? typedTokenHelpers_1.typedTokenHelpers.nodeHasDecoratorsNamed(classNode, ["UseGuards"])
        : false;
    return (hasApiMethodDecorator &&
        !hasUseGuardsDecorator &&
        !hasUseGuardsDecoratorOnController);
};
exports.apiMethodsShouldBeGuarded = apiMethodsShouldBeGuarded;
const rule = (0, createRule_1.createRule)({
    name: "api-methods-should-be-guarded",
    meta: {
        docs: {
            description: "Endpoints should have authentication guards to maintain our security model.",
            requiresTypeChecking: false,
        },
        messages: {
            apiMethodsShouldBeGuarded: "All controller endpoints should have @UseGuards decorators, or one decorating the root of the Controller.",
        },
        schema: [],
        hasSuggestions: false,
        type: "suggestion",
    },
    defaultOptions: [],
    create(context) {
        return {
            // eslint-disable-next-line @typescript-eslint/naming-convention
            MethodDefinition(node) {
                if ((0, exports.apiMethodsShouldBeGuarded)(node)) {
                    context.report({
                        node: node,
                        messageId: "apiMethodsShouldBeGuarded",
                    });
                }
            },
        };
    },
});
exports.default = rule;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpTWV0aG9kc1Nob3VsZEJlR3VhcmRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ydWxlcy9hcGlNZXRob2RzU2hvdWxkQmVHdWFyZGVkL2FwaU1ldGhvZHNTaG91bGRCZUd1YXJkZWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsb0RBQWtEO0FBQ2xELHVEQUFrRDtBQUNsRCxxRUFBZ0U7QUFFekQsTUFBTSx5QkFBeUIsR0FBRyxDQUFDLElBQStCLEVBQUUsRUFBRTtJQUN6RSxNQUFNLHFCQUFxQixHQUFHLHFDQUFpQixDQUFDLHNCQUFzQixDQUNsRSxJQUFJLEVBQ0osQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQ3RFLENBQUM7SUFFRixNQUFNLHFCQUFxQixHQUFHLHFDQUFpQixDQUFDLHNCQUFzQixDQUNsRSxJQUFJLEVBQ0osQ0FBQyxXQUFXLENBQUMsQ0FDaEIsQ0FBQztJQUVGLFNBQVMsb0JBQW9CLENBQ3pCLElBQW1CO1FBRW5CLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxnQkFBUSxDQUFDLGNBQWMsQ0FBQyxnQkFBZ0IsRUFBRTtZQUN4RCxPQUFPLElBQUksQ0FBQztTQUNmO1FBQ0QsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2IsT0FBTyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDNUM7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQsTUFBTSxTQUFTLEdBQUcsb0JBQW9CLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFN0MsTUFBTSxpQ0FBaUMsR0FBRyxTQUFTO1FBQy9DLENBQUMsQ0FBQyxxQ0FBaUIsQ0FBQyxzQkFBc0IsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNwRSxDQUFDLENBQUMsS0FBSyxDQUFDO0lBRVosT0FBTyxDQUNILHFCQUFxQjtRQUNyQixDQUFDLHFCQUFxQjtRQUN0QixDQUFDLGlDQUFpQyxDQUNyQyxDQUFDO0FBQ04sQ0FBQyxDQUFDO0FBbENXLFFBQUEseUJBQXlCLDZCQWtDcEM7QUFFRixNQUFNLElBQUksR0FBRyxJQUFBLHVCQUFVLEVBQWtDO0lBQ3JELElBQUksRUFBRSwrQkFBK0I7SUFDckMsSUFBSSxFQUFFO1FBQ0YsSUFBSSxFQUFFO1lBQ0YsV0FBVyxFQUNQLDZFQUE2RTtZQUVqRixvQkFBb0IsRUFBRSxLQUFLO1NBQzlCO1FBQ0QsUUFBUSxFQUFFO1lBQ04seUJBQXlCLEVBQ3JCLDJHQUEyRztTQUNsSDtRQUNELE1BQU0sRUFBRSxFQUFFO1FBQ1YsY0FBYyxFQUFFLEtBQUs7UUFDckIsSUFBSSxFQUFFLFlBQVk7S0FDckI7SUFDRCxjQUFjLEVBQUUsRUFBRTtJQUNsQixNQUFNLENBQUMsT0FBTztRQUNWLE9BQU87WUFDSCxnRUFBZ0U7WUFDaEUsZ0JBQWdCLENBQUMsSUFBK0I7Z0JBQzVDLElBQUksSUFBQSxpQ0FBeUIsRUFBQyxJQUFJLENBQUMsRUFBRTtvQkFDakMsT0FBTyxDQUFDLE1BQU0sQ0FBQzt3QkFDWCxJQUFJLEVBQUUsSUFBSTt3QkFDVixTQUFTLEVBQUUsMkJBQTJCO3FCQUN6QyxDQUFDLENBQUM7aUJBQ047WUFDTCxDQUFDO1NBQ0osQ0FBQztJQUNOLENBQUM7Q0FDSixDQUFDLENBQUM7QUFFSCxrQkFBZSxJQUFJLENBQUMifQ==