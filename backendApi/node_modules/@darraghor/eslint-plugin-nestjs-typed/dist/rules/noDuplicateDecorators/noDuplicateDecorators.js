"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.standardDecoratorsToValidate = exports.shouldTrigger = void 0;
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable unicorn/prevent-abbreviations */
const createRule_1 = require("../../utils/createRule");
const utils_1 = require("@typescript-eslint/utils");
const shouldTrigger = () => {
    return true;
};
exports.shouldTrigger = shouldTrigger;
exports.standardDecoratorsToValidate = ["Controller", "Injectable"];
const rule = (0, createRule_1.createRule)({
    name: "no-duplicate-decorators",
    meta: {
        docs: {
            description: "Some decorators should only be used once on a property or class. This rule enforces that.",
            requiresTypeChecking: false,
        },
        messages: {
            noDuplicateDecorators: "You have listed the same decorator more than once. Was this intentional?",
        },
        schema: [
            {
                type: "object",
                properties: {
                    customList: {
                        description: "A list of custom decorators that this rule will validate for duplicates",
                        type: "array",
                        minItems: 0,
                        items: {
                            type: "string",
                            minLength: 1,
                        },
                    },
                },
            },
        ],
        hasSuggestions: true,
        type: "suggestion",
    },
    defaultOptions: [
        {
            customList: new Array(),
        },
    ],
    create(context) {
        const customListArrayItem = context.options?.[0];
        let decoratorsToValidate = customListArrayItem?.customList;
        if (!customListArrayItem?.customList ||
            customListArrayItem?.customList.length === 0) {
            decoratorsToValidate = exports.standardDecoratorsToValidate;
        }
        return {
            ["PropertyDefinition,ClassDeclaration"](node) {
                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any
                const allDecorators = node?.decorators;
                if (allDecorators && allDecorators.length > 1) {
                    const decoratorNames = allDecorators.map((decorator) => {
                        if (decorator.expression.type ===
                            utils_1.TSESTree.AST_NODE_TYPES.CallExpression &&
                            decorator.expression.callee &&
                            decorator.expression.callee.type ===
                                utils_1.TSESTree.AST_NODE_TYPES.Identifier) {
                            // eslint-disable-next-line @typescript-eslint/no-unsafe-return
                            return decorator.expression.callee.name;
                        }
                        return "";
                    });
                    const duplicateDecorators = decoratorNames.filter((decoratorName, index) => {
                        return (decoratorName &&
                            decoratorNames.indexOf(decoratorName) !== index);
                    });
                    if (duplicateDecorators.length > 0 &&
                        decoratorsToValidate.some((decoratorToValidate) => duplicateDecorators.includes(decoratorToValidate))) {
                        context.report({
                            node: node,
                            messageId: "noDuplicateDecorators",
                            suggest: [
                                {
                                    messageId: "noDuplicateDecorators",
                                    fix: (fixer) => {
                                        const decoratorsToKeep = decoratorNames.filter((decoratorName, index) => {
                                            return (decoratorName &&
                                                decoratorNames.indexOf(decoratorName) === index);
                                        });
                                        const decoratorsToKeepText = decoratorsToKeep.join(", ");
                                        return fixer.replaceText(node, decoratorsToKeepText);
                                    },
                                },
                            ],
                        });
                    }
                }
            },
        };
    },
});
exports.default = rule;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9EdXBsaWNhdGVEZWNvcmF0b3JzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3J1bGVzL25vRHVwbGljYXRlRGVjb3JhdG9ycy9ub0R1cGxpY2F0ZURlY29yYXRvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsK0RBQStEO0FBQy9ELGtEQUFrRDtBQUNsRCx1REFBa0Q7QUFFbEQsb0RBQWtEO0FBTzNDLE1BQU0sYUFBYSxHQUFHLEdBQVksRUFBRTtJQUN2QyxPQUFPLElBQUksQ0FBQztBQUNoQixDQUFDLENBQUM7QUFGVyxRQUFBLGFBQWEsaUJBRXhCO0FBQ1csUUFBQSw0QkFBNEIsR0FBRyxDQUFDLFlBQVksRUFBRSxZQUFZLENBQUMsQ0FBQztBQUN6RSxNQUFNLElBQUksR0FBRyxJQUFBLHVCQUFVLEVBQXdEO0lBQzNFLElBQUksRUFBRSx5QkFBeUI7SUFDL0IsSUFBSSxFQUFFO1FBQ0YsSUFBSSxFQUFFO1lBQ0YsV0FBVyxFQUNQLDJGQUEyRjtZQUMvRixvQkFBb0IsRUFBRSxLQUFLO1NBQzlCO1FBQ0QsUUFBUSxFQUFFO1lBQ04scUJBQXFCLEVBQ2pCLDBFQUEwRTtTQUNqRjtRQUNELE1BQU0sRUFBRTtZQUNKO2dCQUNJLElBQUksRUFBRSxRQUErQjtnQkFDckMsVUFBVSxFQUFFO29CQUNSLFVBQVUsRUFBRTt3QkFDUixXQUFXLEVBQ1AseUVBQXlFO3dCQUM3RSxJQUFJLEVBQUUsT0FBOEI7d0JBQ3BDLFFBQVEsRUFBRSxDQUFDO3dCQUNYLEtBQUssRUFBRTs0QkFDSCxJQUFJLEVBQUUsUUFBK0I7NEJBQ3JDLFNBQVMsRUFBRSxDQUFDO3lCQUNmO3FCQUNKO2lCQUNKO2FBQ0o7U0FDSjtRQUNELGNBQWMsRUFBRSxJQUFJO1FBQ3BCLElBQUksRUFBRSxZQUFZO0tBQ3JCO0lBQ0QsY0FBYyxFQUFFO1FBQ1o7WUFDSSxVQUFVLEVBQUUsSUFBSSxLQUFLLEVBQVU7U0FDbEM7S0FDSjtJQUVELE1BQU0s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